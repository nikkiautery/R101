dataset(lures)
library(readr)
supermarket_sales_Sheet1 <- read_csv("PluralSight/R Programming/02.DatainR/supermarket-sales/supermarket_sales - Sheet1.csv",
col_types = cols(Date = col_date(format = "%m/%d/%Y"),
Quantity = col_integer(), Time = col_time(format = "%H:%M")))
View(supermarket_sales_Sheet1)
view(supermarket_sales_Sheet1)
head(supermarket_sales_Sheet1)
View(supermarket_sales_Sheet1)
View(supermarket_sales_Sheet1)
View(supermarket_sales_Sheet1)
supermarket_sales_Sheet1$'Branch' =  as.factor(supermarket_sales_Sheet1$'Branch')
supermarket_sales_Sheet1$'Customer type' = as.factor(supermarket_sales_Sheet1$'Customer type')
supermarket_sales_Sheet1$'Gender' = as.factor(supermarket_sales_Sheet1$'Gender')
supermarket_sales_Sheet1$'Product line' = as.factor(supermarket_sales_Sheet1$'Product line')
getwd()
setwd("c:","Users","naute","documents","PluralSight","R Programming","02.DatainR")
setwd("c://","Users","naute","documents","PluralSight","R Programming","02.DatainR")
setwd("~/PluralSight/R Programming/02.DatainR")
head(supermarket_sales_Sheet1)
supermarket_sales_Sheet1$'City' = as.factor(supermarket_sales_Sheet1$'City')
head(supermarket_sales_Sheet1)
x = c("Nikki","Will","Michelle","Michael")
as.factor(x)
str(x)
type(x)
x <- c("Nikki","Will","Michelle","Michael")
as.factor(x) ## Updates as a factor
str(x)
a <- c("Donny", "Bill","Fred","Frank")
b <- as.factor(a)
b
rm(b)
a <- as.factor(a)
a
view(a)
view(supermarket_sales_Sheet1)
names(supermarket_sales_Sheet1)
## Extracting columns for demonstration
mydf = lures(,c[1,2,3])
## Extracting columns for demonstration
mydf = supermarket_sales_Sheet1(,c[1,2,3])
names(supermarket_sales_Sheet1)
## Extracting columns for demonstration
mydf = supermarket_sales_Sheet1(,c[1,2,3])
## R Base Method:
## Access the header as one object with function names()
names(supermarket_sales_Sheet1)
mydf = supermarket_sales_Sheet1[,c(1,2,3)]
head(mydf)
newnames = c("INVOICE", "STORE", "LOCATION")
names(mydf) = newnames
head(mydf)
## Renaming Columns with dplyr
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
## Renaming Columns with dplyr
library(dplyr)
head(mydf)
supermarket_sales_Sheet1 = rename(supermarket_sales_Sheet1,
CUSTOMERTYPE = "Customer type",
PRODUCTLINE = "Product line",
PRICE = "Unit Price")
supermarket_sales_Sheet1 = rename(supermarket_sales_Sheet1,
CUSTOMERTYPE = "Customer type",
PRODUCTLINE = "Product line",
PRICE = "Unit price")
View(supermarket_sales_Sheet1)
supermarket_sales_Sheet1 = rename(supermarket_sales_Sheet1,
INVOICE = "Invoice ID")
supermarket_sales_Sheet1 = rename(supermarket_sales_Sheet1,
STORE = "Branch",
LOCATION = "City",
GENDER = "Gender",
QUANTITY = "Quantity",
TAX = "Tax 5%",
GROSS = "Margin gross percentage",
INCOME = "Gross income",
RATING = "Rating")
supermarket_sales_Sheet1 = rename(supermarket_sales_Sheet1,
STORE = "Branch",
LOCATION = "City",
GENDER = "Gender",
QUANTITY = "Quantity",
TAX = "Tax 5%",
GROSS = "gross margin percentage",
INCOME = "gross income",
RATING = "Rating")
supermarket_sales_Sheet1 = rename(supermarket_sales_Sheet1,
TOTAL = "Total",
TRANSDATE = "Date",
TRANSTIME = "Time",
METHOD = "Payment method",
COGS = "cogs")
supermarket_sales_Sheet1 = rename(supermarket_sales_Sheet1,
TOTAL = "Total",
TRANSDATE = "Date",
TRANSTIME = "Time",
METHOD = "Payment",
COGS = "cogs")
head(supermarket_sales_Sheet1)
summary(supermarket_sales_Sheet1)
head(supermarket_sales_Sheet1)
tail(supermarket_sales_Sheet1)
tail(supermarket_sales_Sheet1, 10) ## View the last 10 rows
glimpse(supermarket_sales_Sheet1)
summary(supermarket_sales_Sheet1)
as.table(supermarket_sales_Sheet1)
typeof(supermarket_sales_Sheet1)
str(supermarket_sales_Sheet1)
View(supermarket_sales_Sheet1)
View(mydf)
View(supermarket_sales_Sheet1)
View(supermarket_sales_Sheet1)
str(supermarket_sales_Sheet1)
summary(as.integer(supermarket_sales_Sheet1$QUANTITY))
install.packages(skimr)
install.packages("skimr")
library(skimr)
str(supermarket_sales_Sheet1)
skim(supermarket_sales_Sheet1)
table(supermarket_sales_Sheet1$PRODUCTLINE)
prop.table(table(supermarket_sales_Sheet1$PRODUCTLINE))
table(supermarket_sales_Sheet1$PRODUCTLINE)
prop.table(table(supermarket_sales_Sheet1$PRODUCTLINE))
## Creating a crosstab
table(supermarket_sales_Sheet1$PRODUCTLINE, supermarket_sales_Sheet1$STORE)
mytable = table(supermarket_sales_Sheet1$PRODUCTLINE,
supermarket_sales_Sheet1$STORE)
mytable
rowSums(mytable)
colSums(mytable)
prop.table(mytable)
## Round to 5 decimal values, multiplying by 100 sets to percentage scale
round(prop.table(mytable), 5) * 100
chisq.test(supermarket_sales_Sheet1$PRODUCTLINE, supermarket_sales_Sheet1$STORE)
hist(supermarket_sales_Sheet1$PRICE)
plot(supermarket_sales_Sheet1$PRODUCTLINE)
plot(supermarket_sales_Sheet1$GENDER)
plot(supermarket_sales_Sheet1$CUSTOMERTYPE)
plot(supermarket_sales_Sheet1$STORE)
boxplot(TOTAL ~ PRODUCTLINE, data = supermarket_sales_Sheet1, las = 2)
boxplot(TOTAL ~ PRODUCTLINE, data = supermarket_sales_Sheet1, las = 1)
boxplot(TOTAL ~ PRODUCTLINE, data = supermarket_sales_Sheet1, las = 2)
plot(supermarket_sales_Sheet1$TOTAL, supermarket_sales_Sheet1$COGS)
plot(supermarket_sales_Sheet1$TOTAL, supermarket_sales$TAX)
plot(supermarket_sales_Sheet1$TOTAL, supermarket_sales$TAX)
plot(supermarket_sales_Sheet1$QUANTITY, supermarket_sales_Sheet1$TOTAL)
plot(supermarket_sales_Sheet1$TAX, supermarket_sales_Sheet1$TOTAL)
plot(supermarket_sales_Sheet1$COGS, supermarket_sales_Sheet1$TOTAL)
plot(supermarket_sales_Sheet1$TAX, supermarket_sales_Sheet1$TOTAL)
plot(supermarket_sales_Sheet1$TAX, supermarket_sales_Sheet1$TOTAL)
plot(supermarket_sales_Sheet1$QUANTITY, supermarket_sales_Sheet1$TOTAL)
is.na(supermarket_sales_Sheet1)
install.packages("visdat")
## Visdat package can be used to visually determine missing data;
## vis_dat() visual representation of data types and missing values by color
## vis_miss() shows the proportion of missing values
visdat(supermarket_sales_Sheet1)
## Visdat package can be used to visually determine missing data;
## vis_dat() visual representation of data types and missing values by color
## vis_miss() shows the proportion of missing values
library(visdat)
vis_dat(supermarket_sales_Sheet1)
vis_miss(supermarket_sales_Sheet1)
vis_dat(supermarket_sales_Sheet1)
supermarket_sales_Sheet1 = na.omit(supermarket_sales_Sheet1)  ## Omit NA values
supermarket_sales_Sheet1
install.packages("tidyr")
## Use tidyr
library(tidyr)
supermarket_sales = supermarket_sales_Sheet1[, c(1:11, 13:17)]
head(supermarket_sales)
supermarket_sales_Sheet1 = supermarket_sales_Sheet1[, -c(12)]
head(supermarket_sales_Sheet1)
head(supermarket_sales)
supermarket_sales = cbind(supermarket_sales_Sheet1, supermarket_sales)
head(supermarket_sales)
View(supermarket_sales)
View(supermarket_sales)
View(supermarket_sales_Sheet1)
View(supermarket_sales_Sheet1)
## Adding an External Variable to a table.
## Merging two tables or extending a table with further variables/information
## Join: merging two tables based on one or more common variable(s), keys
head(supermarket_sales)
summary(supermarket_sales)
typeof(supermarket_sales)
supermarket_sales
library(readr)
customerdata <- read_csv("supermarket-sales/customerdata.csv",
col_types = cols(FIRST = col_factor(levels = c("A",
"B", "C")), LAST = col_factor(levels = c("Naypyitaw",
"Yangon", "Mandalay"))))
View(customerdata)
supermarket_sales <- merge(supermarket_sales, customerdata, by = "INVOICE")
supermarket_sales = merge(supermarket_sales, customerdata, by = "INVOICE")
INVOICE <- (supermarket_sales$INVOICE)
INVOICE2 <- (customerdata$INVOICE)
supermarketSalesbyCustomer <- merge(supermarket_sales,customerdata, by = "INVOICE")
supermarketSalesbyCustomer = merge(supermarket_sales,customerdata, by = "INVOICE")
supermarketSalesbyCustomer = merge( x = supermarket_sales, y = customerdata, by = "INVOICE")
supermarketSalesbyCustomer = merge(supermarket_sales, customerdata, by = "INVOICE",
all = TRUE)
supermarketSalesbyCustomer = merge(supermarket_sales, customerdata, by = "INVOICE2",
all = TRUE)
supermarketSalesbyCustomer = merge(x = supermarket_sales, y = customerdata, by.x = "INVOICE",
by.y = "INVOICE", all = TRUE)
supermarketSalesbyCustomer = merge(x = supermarket_sales, y = customerdata, by.x = "INVOICE",
by.y = "INVOICE2", all = TRUE)
supermarketSalesbyCustomer = merge(x = supermarket_sales, y = customerdata, by.x = "INVOICE",
by.y = "INVOICE2", all = TRUE)
supermarketSalesbyCustomer = merge(x = supermarket_sales, y = customerdata, by.x = c("INVOICE"),
by.y = c("INVOICE"), all = TRUE)
help
help("merge")
supermarket_sales = merge(supermarket_sales, customerdata, by = "INVOICE")
supermarket_sales = merge(supermarket_sales, customerdata, by = "INVOICE", all = TRUE)
supermarket_sales
View(supermarket_sales)
View(supermarket_sales)
supermarket_sales <- merge(supermarket_sales_Sheet1, customerdata, by = "INVOICE")
sales_by_customer <- supermarket_sales_Sheet1
sales_by_customer
View(sales_by_customer)
View(sales_by_customer)
supermarket_sales <- merge(supermarket_sales_Sheet1, customerdata, by = "INVOICE", all = TRUE)
View(sales_by_customer)
View(sales_by_customer)
supermarket_sales <- merge(supermarket_sales_Sheet1, customerdata, by = "INVOICE")
View(supermarket_sales)
View(supermarket_sales)
sales_by_customer <- supermarket_sales
sales_by_customer
View(sales_by_customer)
View(sales_by_customer)
TOTAL <- (sales_by_customer$TOTAL)
SHIP <- c(0.03, 0.02,0.03,0.05,0.04, 0.02, 0.01, 0.06, 0.03, 0.05,0.02,0.06)
mydata <- data.frame(TOTAL, SHIP)
## Now add shipping costs as a column in sales_by_customer dataframe...
COUNT(sales_by_customer$PRODUCTLINE)
## Now add shipping costs as a column in sales_by_customer dataframe...
Summary(sales_by_customer$PRODUCTLINE)
## Now add shipping costs as a column in sales_by_customer dataframe...
SUM(sales_by_customer$PRODUCTLINE)
## Now add shipping costs as a column in sales_by_customer dataframe...
summary(sales_by_customer)
ITEM <- (sales_by_customer$PRODUCTLINE)
SHIP <- c(0.03, 0.02,0.03,0.05,0.04, 0.02)
mydata <- data.frame(TOTAL, SHIP)
mydata <- data.frame(ITEM, SHIP)
ITEM <- (sales_by_customer$PRODUCTLINE)
SHIP <- c(0.03, 0.02,0.03,0.05,0.04, 0.02)
mydata <- data.frame(ITEM, SHIP)
sales_by_customer$PRODUCTLINE <- as.factor(sales_by_customer$PRODUCTLINE)
ITEM <- (sales_by_customer$PRODUCTLINE)
ITEM
ITEM <- LEVELS(sales_by_customer$PRODUCTLINE)
ITEM <- levels(sales_by_customer$PRODUCTLINE)
SHIP <- c(0.03, 0.02, 0.04, 0.06, 0.03, 0,02)
mydata <- data.frame(ITEM, SHIP)
SHIP <- c(0.03, 0.02, 0.04, 0.06, 0.03, 0.02)
SHIP <- c(0.03, 0.02, 0.04, 0.06, 0.03, 0.02, 0.01)
mydata <- data.frame(ITEM, SHIP)
SHIP <- c(0.03, 0.02, 0.04, 0.06, 0.03, 0.02)
mydata <- data.frame(ITEM, SHIP)
PRODUCTLINE <- levels(sales_by_customer$PRODUCTLINE)
SHIPCOST <- c(0.01, 0.02, 0.03, 0.04, 0.05, 0.06)
mydata <- data.frame(PRODUCTLINE,SHIPCOST)
sales_by_customer <- merge(sales_by_customer, mydata, by = "PRODUCTLINE")
View(sales_by_customer)
View(sales_by_customer)
## Deriving variables from existing ones
## Converting units
## Using the mutate() function from dplyr calculates new variables while keeping
## the base variables.
library(dplyr)
sales_by_customer <- mutate(sales_by_customer, ADJ_TOTAL = (TOTAL * SHIP)+TOTAL)
sales_by_customer <- mutate(sales_by_customer, ADJ_TOTAL = (TOTAL * SHIP)+TOTAL))
sales_by_customer <- mutate(sales_by_customer, ADJ_TOTAL = ((TOTAL * SHIP)+(TOTAL)))
sales_by_customer <- mutate(sales_by_customer, ADJ_TOTAL = ((TOTAL * SHIPCOST)+(TOTAL)))
View(sales_by_customer)
View(sales_by_customer)
## Summarizing a dataset based on a given scope (whole table or factor) and by
## a given aggregation (e.g. mean, median
install.packages("data.table")
## Good tools include: aggregate() from R Base, dplyr, data.table
## data.table is easy to query and fast.
library(data.table)
sales_by_customer <- data.table(sales_by_customer)
## Summaries; [j, by]
sales_by_customer[, mean(TOTAL), by = PRODUCTLINE]
x <- sales_by_customer[ , round(mean(TOTAL), 1),
by = list(PRODUCTLINE, LOCATION)]
x
View(x)
View(x)
y <- sales_by_customer[QUANTITY > 2, round(mean(TOTAL), 1),
by = list(PRODUCTLINE, LOCATION)]
y
## use the count operator (.N) to learn the frequency of an event (parameter j
z <- sales_by_customer[quantity > 2 & ADJ_TOTAL < 100, .N,
by = list(PRODUCTLINE, LOCATION)]
z <- sales_by_customer[QUANTITY > 2 & ADJ_TOTAL < 100, .N,
by = list(PRODUCTLINE, LOCATION)]
z
a <- z <- sales_by_customer[QUANTITY > 2 & ADJ_TOTAL > 100, .N,
by = list(PRODUCTLINE, LOCATION)]
a
## Pepared Data to CSV using write.csv() --> setwd() to store the file in.
getwd()
setwd("~/PluralSight/R Programming/02.DatainR")
write.csv(sales_by_customer, "myexport.csv")
